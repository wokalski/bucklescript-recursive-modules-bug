// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_module = require("bs-platform/lib/js/caml_module.js");
var Nars_struct = require("./nars_struct.bs.js");
var Spec$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/spec.bs.js");
var Serialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/serialize.bs.js");
var Deserialize$Ocamlprotocplugin = require("ocaml-protoc-plugin-runtime-bs/src/ocaml_protoc_plugin/deserialize.bs.js");

var StringValue = Caml_module.init_mod([
      "schema.ml",
      24,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Int32Value = Caml_module.init_mod([
      "schema.ml",
      45,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Callback = Caml_module.init_mod([
      "schema.ml",
      66,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var LocalProp = Caml_module.init_mod([
      "schema.ml",
      87,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var CustomComponent = Caml_module.init_mod([
      "schema.ml",
      108,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var View = Caml_module.init_mod([
      "schema.ml",
      129,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var FlatList = Caml_module.init_mod([
      "schema.ml",
      150,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var TouchableOpacity = Caml_module.init_mod([
      "schema.ml",
      171,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var RawText = Caml_module.init_mod([
      "schema.ml",
      192,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Text = Caml_module.init_mod([
      "schema.ml",
      213,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var TextInput = Caml_module.init_mod([
      "schema.ml",
      234,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Switch = Caml_module.init_mod([
      "schema.ml",
      255,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Image = Caml_module.init_mod([
      "schema.ml",
      276,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ReactElement = Caml_module.init_mod([
      "schema.ml",
      297,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Unmount = Caml_module.init_mod([
      "schema.ml",
      318,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Render = Caml_module.init_mod([
      "schema.ml",
      339,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Call = Caml_module.init_mod([
      "schema.ml",
      360,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ClientToServer = Caml_module.init_mod([
      "schema.ml",
      381,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var $$Error = Caml_module.init_mod([
      "schema.ml",
      402,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var Update = Caml_module.init_mod([
      "schema.ml",
      423,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

var ServerToClient = Caml_module.init_mod([
      "schema.ml",
      444,
      6
    ], [[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]]);

function name$prime(param) {
  return "Schema.StringValue";
}

var spec = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize = Serialize$Ocamlprotocplugin.serialize(spec);

function to_proto(t) {
  return Curry._2(serialize, /* () */0, t);
}

function constructor(a) {
  return a;
}

var spec$1 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize = Deserialize$Ocamlprotocplugin.deserialize(spec$1, constructor);

var from_proto = Curry.__1(deserialize);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], StringValue, {
      name$prime: name$prime,
      to_proto: to_proto,
      from_proto: from_proto
    });

function name$prime$1(param) {
  return "Schema.Int32Value";
}

var spec$2 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$1 = Serialize$Ocamlprotocplugin.serialize(spec$2);

function to_proto$1(t) {
  return Curry._2(serialize$1, /* () */0, t);
}

function constructor$1(a) {
  return a;
}

var spec$3 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$1 = Deserialize$Ocamlprotocplugin.deserialize(spec$3, constructor$1);

var from_proto$1 = Curry.__1(deserialize$1);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Int32Value, {
      name$prime: name$prime$1,
      to_proto: to_proto$1,
      from_proto: from_proto$1
    });

function name$prime$2(param) {
  return "Schema.Callback";
}

var spec$4 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$2 = Serialize$Ocamlprotocplugin.serialize(spec$4);

function to_proto$2(t) {
  return Curry._2(serialize$2, /* () */0, t);
}

function constructor$2(a) {
  return a;
}

var spec$5 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$2 = Deserialize$Ocamlprotocplugin.deserialize(spec$5, constructor$2);

var from_proto$2 = Curry.__1(deserialize$2);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Callback, {
      name$prime: name$prime$2,
      to_proto: to_proto$2,
      from_proto: from_proto$2
    });

function name$prime$3(param) {
  return "Schema.LocalProp";
}

var spec$6 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.string,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$3 = Serialize$Ocamlprotocplugin.serialize(spec$6);

function to_proto$3(t) {
  var f$prime = Curry._1(serialize$3, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* localKey */0], param[/* propKey */1]);
}

function constructor$3(localKey, propKey) {
  return /* record */[
          /* localKey */localKey,
          /* propKey */propKey
        ];
}

var spec$7 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.string,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$3 = Deserialize$Ocamlprotocplugin.deserialize(spec$7, constructor$3);

var from_proto$3 = Curry.__1(deserialize$3);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], LocalProp, {
      name$prime: name$prime$3,
      to_proto: to_proto$3,
      from_proto: from_proto$3
    });

function name$prime$4(param) {
  return "Schema.CustomComponent";
}

var spec$8 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.bytes,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$4 = Serialize$Ocamlprotocplugin.serialize(spec$8);

function to_proto$4(t) {
  var f$prime = Curry._1(serialize$4, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* type_id */0], param[/* contents */1]);
}

function constructor$4(type_id, contents) {
  return /* record */[
          /* type_id */type_id,
          /* contents */contents
        ];
}

var spec$9 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.bytes,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$4 = Deserialize$Ocamlprotocplugin.deserialize(spec$9, constructor$4);

var from_proto$4 = Curry.__1(deserialize$4);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], CustomComponent, {
      name$prime: name$prime$4,
      to_proto: to_proto$4,
      from_proto: from_proto$4
    });

function name$prime$5(param) {
  return "Schema.View";
}

var spec$10 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$5 = Serialize$Ocamlprotocplugin.serialize(spec$10);

function to_proto$5(t) {
  var f$prime = Curry._1(serialize$5, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* children */1]);
}

function constructor$5(style, children) {
  return /* record */[
          /* style */style,
          /* children */children
        ];
}

var spec$11 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$5 = Deserialize$Ocamlprotocplugin.deserialize(spec$11, constructor$5);

var from_proto$5 = Curry.__1(deserialize$5);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], View, {
      name$prime: name$prime$5,
      to_proto: to_proto$5,
      from_proto: from_proto$5
    });

function name$prime$6(param) {
  return "Schema.FlatList";
}

var spec$12 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Int32Value.to_proto)
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
                      Spec$Ocamlprotocplugin.Serialize.C.not_packed
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                          Spec$Ocamlprotocplugin.Serialize.C.not_packed
                        ]), Spec$Ocamlprotocplugin.Serialize.C.nil)))));

var serialize$6 = Serialize$Ocamlprotocplugin.serialize(spec$12);

function to_proto$6(t) {
  var f$prime = Curry._1(serialize$6, /* () */0);
  var param = t;
  return Curry._5(f$prime, param[/* style */0], param[/* onEndReached */1], param[/* onEndReachedThreshold */2], param[/* children */3], param[/* localProps */4]);
}

function constructor$6(style, onEndReached, onEndReachedThreshold, children, localProps) {
  return /* record */[
          /* style */style,
          /* onEndReached */onEndReached,
          /* onEndReachedThreshold */onEndReachedThreshold,
          /* children */children,
          /* localProps */localProps
        ];
}

var spec$13 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Int32Value.from_proto)
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                      4,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
                      Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)))));

var deserialize$6 = Deserialize$Ocamlprotocplugin.deserialize(spec$13, constructor$6);

var from_proto$6 = Curry.__1(deserialize$6);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], FlatList, {
      name$prime: name$prime$6,
      to_proto: to_proto$6,
      from_proto: from_proto$6
    });

function name$prime$7(param) {
  return "Schema.TouchableOpacity";
}

var spec$14 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                  Spec$Ocamlprotocplugin.Serialize.C.not_packed
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$7 = Serialize$Ocamlprotocplugin.serialize(spec$14);

function to_proto$7(t) {
  var f$prime = Curry._1(serialize$7, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* onPress */0], param[/* children */1], param[/* localProps */2]);
}

function constructor$7(onPress, children, localProps) {
  return /* record */[
          /* onPress */onPress,
          /* children */children,
          /* localProps */localProps
        ];
}

var spec$15 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                  Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$7 = Deserialize$Ocamlprotocplugin.deserialize(spec$15, constructor$7);

var from_proto$7 = Curry.__1(deserialize$7);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], TouchableOpacity, {
      name$prime: name$prime$7,
      to_proto: to_proto$7,
      from_proto: from_proto$7
    });

function name$prime$8(param) {
  return "Schema.RawText";
}

var spec$16 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$8 = Serialize$Ocamlprotocplugin.serialize(spec$16);

function to_proto$8(t) {
  return Curry._2(serialize$8, /* () */0, t);
}

function constructor$8(a) {
  return a;
}

var spec$17 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$8 = Deserialize$Ocamlprotocplugin.deserialize(spec$17, constructor$8);

var from_proto$8 = Curry.__1(deserialize$8);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], RawText, {
      name$prime: name$prime$8,
      to_proto: to_proto$8,
      from_proto: from_proto$8
    });

function name$prime$9(param) {
  return "Schema.Text";
}

var spec$18 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
              Spec$Ocamlprotocplugin.Serialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$9 = Serialize$Ocamlprotocplugin.serialize(spec$18);

function to_proto$9(t) {
  var f$prime = Curry._1(serialize$9, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* children */1]);
}

function constructor$9(style, children) {
  return /* record */[
          /* style */style,
          /* children */children
        ];
}

var spec$19 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
              Spec$Ocamlprotocplugin.Deserialize.C.not_packed
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$9 = Deserialize$Ocamlprotocplugin.deserialize(spec$19, constructor$9);

var from_proto$9 = Curry.__1(deserialize$9);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Text, {
      name$prime: name$prime$9,
      to_proto: to_proto$9,
      from_proto: from_proto$9
    });

function name$prime$10(param) {
  return "Schema.TextInput";
}

var spec$20 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
                ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
                      4,
                      Spec$Ocamlprotocplugin.Serialize.C.string,
                      Spec$Ocamlprotocplugin.Serialize.C.proto3
                    ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, LocalProp.to_proto),
                          Spec$Ocamlprotocplugin.Serialize.C.not_packed
                        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
                            ]), Spec$Ocamlprotocplugin.Serialize.C.nil))))));

var serialize$10 = Serialize$Ocamlprotocplugin.serialize(spec$20);

function to_proto$10(t) {
  var f$prime = Curry._1(serialize$10, /* () */0);
  var param = t;
  return Curry._6(f$prime, param[/* style */0], param[/* placeholderTextColor */1], param[/* placeholder */2], param[/* value */3], param[/* localProps */4], param[/* onValueChange */5]);
}

function constructor$10(style, placeholderTextColor, placeholder, value, localProps, onValueChange) {
  return /* record */[
          /* style */style,
          /* placeholderTextColor */placeholderTextColor,
          /* placeholder */placeholder,
          /* value */value,
          /* localProps */localProps,
          /* onValueChange */onValueChange
        ];
}

var spec$21 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
                ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
                      4,
                      Spec$Ocamlprotocplugin.Deserialize.C.string,
                      Spec$Ocamlprotocplugin.Deserialize.C.proto3
                    ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, LocalProp.from_proto),
                          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
                        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                              6,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
                            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil))))));

var deserialize$10 = Deserialize$Ocamlprotocplugin.deserialize(spec$21, constructor$10);

var from_proto$10 = Curry.__1(deserialize$10);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], TextInput, {
      name$prime: name$prime$10,
      to_proto: to_proto$10,
      from_proto: from_proto$10
    });

function name$prime$11(param) {
  return "Schema.Switch";
}

var spec$22 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.bool,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Callback.to_proto)
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$11 = Serialize$Ocamlprotocplugin.serialize(spec$22);

function to_proto$11(t) {
  var f$prime = Curry._1(serialize$11, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* style */0], param[/* value */1], param[/* onValueChange */2]);
}

function constructor$11(style, value, onValueChange) {
  return /* record */[
          /* style */style,
          /* value */value,
          /* onValueChange */onValueChange
        ];
}

var spec$23 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.bool,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
                  3,
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Callback.from_proto)
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$11 = Deserialize$Ocamlprotocplugin.deserialize(spec$23, constructor$11);

var from_proto$11 = Curry.__1(deserialize$11);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Switch, {
      name$prime: name$prime$11,
      to_proto: to_proto$11,
      from_proto: from_proto$11
    });

function name$prime$12(param) {
  return "Schema.Image";
}

var spec$24 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Serialize.C.string,
              Spec$Ocamlprotocplugin.Serialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$12 = Serialize$Ocamlprotocplugin.serialize(spec$24);

function to_proto$12(t) {
  var f$prime = Curry._1(serialize$12, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* style */0], param[/* sourceURLString */1]);
}

function constructor$12(style, sourceURLString) {
  return /* record */[
          /* style */style,
          /* sourceURLString */sourceURLString
        ];
}

var spec$25 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
              2,
              Spec$Ocamlprotocplugin.Deserialize.C.string,
              Spec$Ocamlprotocplugin.Deserialize.C.proto3
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$12 = Deserialize$Ocamlprotocplugin.deserialize(spec$25, constructor$12);

var from_proto$12 = Curry.__1(deserialize$12);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Image, {
      name$prime: name$prime$12,
      to_proto: to_proto$12,
      from_proto: from_proto$12
    });

function name$prime$13(param) {
  return "Schema.ReactElement";
}

var spec$26 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, StringValue.to_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                var variant = param[0];
                if (variant >= -193011497) {
                  if (variant !== -119655427) {
                    if (variant >= 936573133) {
                      if (variant >= 958946949) {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    3,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, View.to_proto),
                                    param[1]
                                  ]);
                      } else {
                        return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                    7,
                                    Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Text.to_proto),
                                    param[1]
                                  ]);
                      }
                    } else if (variant >= -99762668) {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  9,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Switch.to_proto),
                                  param[1]
                                ]);
                    } else {
                      return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                  4,
                                  Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, FlatList.to_proto),
                                  param[1]
                                ]);
                    }
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                6,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, TextInput.to_proto),
                                param[1]
                              ]);
                  }
                } else if (variant >= -687863147) {
                  if (variant >= -198771759) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                2,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, CustomComponent.to_proto),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                8,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, RawText.to_proto),
                                param[1]
                              ]);
                  }
                } else if (variant >= -711832046) {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              5,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, TouchableOpacity.to_proto),
                              param[1]
                            ]);
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              10,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Image.to_proto),
                              param[1]
                            ]);
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$13 = Serialize$Ocamlprotocplugin.serialize(spec$26);

function to_proto$13(t) {
  var f$prime = Curry._1(serialize$13, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* key */0], param[/* value */1]);
}

function constructor$13(key, value) {
  return /* record */[
          /* key */key,
          /* value */value
        ];
}

var spec$27 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, StringValue.from_proto)
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, CustomComponent.from_proto),
                    (function (v) {
                        return /* `Custom */[
                                -198771759,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, View.from_proto),
                      (function (v) {
                          return /* `View */[
                                  958946949,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, FlatList.from_proto),
                        (function (v) {
                            return /* `FlatList */[
                                    -193011497,
                                    v
                                  ];
                          })
                      ]),
                  /* :: */[
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                          5,
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, TouchableOpacity.from_proto),
                          (function (v) {
                              return /* `TouchableOpacity */[
                                      -711832046,
                                      v
                                    ];
                            })
                        ]),
                    /* :: */[
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                            6,
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, TextInput.from_proto),
                            (function (v) {
                                return /* `TextInput */[
                                        -119655427,
                                        v
                                      ];
                              })
                          ]),
                      /* :: */[
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                              7,
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Text.from_proto),
                              (function (v) {
                                  return /* `Text */[
                                          936573133,
                                          v
                                        ];
                                })
                            ]),
                        /* :: */[
                          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                8,
                                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, RawText.from_proto),
                                (function (v) {
                                    return /* `RawText */[
                                            -687863147,
                                            v
                                          ];
                                  })
                              ]),
                          /* :: */[
                            Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                  9,
                                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Switch.from_proto),
                                  (function (v) {
                                      return /* `Switch */[
                                              -99762668,
                                              v
                                            ];
                                    })
                                ]),
                            /* :: */[
                              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                                    10,
                                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Image.from_proto),
                                    (function (v) {
                                        return /* `Image */[
                                                -795439301,
                                                v
                                              ];
                                      })
                                  ]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$13 = Deserialize$Ocamlprotocplugin.deserialize(spec$27, constructor$13);

var from_proto$13 = Curry.__1(deserialize$13);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ReactElement, {
      name$prime: name$prime$13,
      to_proto: to_proto$13,
      from_proto: from_proto$13
    });

function name$prime$14(param) {
  return "Schema.Unmount";
}

var spec$28 = Spec$Ocamlprotocplugin.Serialize.C.nil;

var serialize$14 = Serialize$Ocamlprotocplugin.serialize(spec$28);

function to_proto$14(t) {
  return Curry._1(serialize$14, /* () */0);
}

var spec$29 = Spec$Ocamlprotocplugin.Deserialize.C.nil;

var deserialize$14 = Deserialize$Ocamlprotocplugin.deserialize(spec$29, /* () */0);

var from_proto$14 = Curry.__1(deserialize$14);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Unmount, {
      name$prime: name$prime$14,
      to_proto: to_proto$14,
      from_proto: from_proto$14
    });

function name$prime$15(param) {
  return "Schema.Render";
}

var spec$30 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.string,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
                  3,
                  Spec$Ocamlprotocplugin.Serialize.C.string,
                  Spec$Ocamlprotocplugin.Serialize.C.packed
                ]), Spec$Ocamlprotocplugin.Serialize.C.nil)));

var serialize$15 = Serialize$Ocamlprotocplugin.serialize(spec$30);

function to_proto$15(t) {
  var f$prime = Curry._1(serialize$15, /* () */0);
  var param = t;
  return Curry._3(f$prime, param[/* name */0], param[/* props */1], param[/* localProps */2]);
}

function constructor$14(name, props, localProps) {
  return /* record */[
          /* name */name,
          /* props */props,
          /* localProps */localProps
        ];
}

var spec$31 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.string,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
            ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
                  3,
                  Spec$Ocamlprotocplugin.Deserialize.C.string,
                  Spec$Ocamlprotocplugin.Deserialize.C.packed
                ]), Spec$Ocamlprotocplugin.Deserialize.C.nil)));

var deserialize$15 = Deserialize$Ocamlprotocplugin.deserialize(spec$31, constructor$14);

var from_proto$15 = Curry.__1(deserialize$15);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Render, {
      name$prime: name$prime$15,
      to_proto: to_proto$15,
      from_proto: from_proto$15
    });

function name$prime$16(param) {
  return "Schema.Call";
}

var spec$32 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.to_proto)
            ]), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$16 = Serialize$Ocamlprotocplugin.serialize(spec$32);

function to_proto$16(t) {
  var f$prime = Curry._1(serialize$16, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* messageId */0], param[/* args */1]);
}

function constructor$15(messageId, args) {
  return /* record */[
          /* messageId */messageId,
          /* args */args
        ];
}

var spec$33 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic_opt, /* tuple */[
              2,
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Nars_struct.Google_mirror.Protobuf.Struct.from_proto)
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$16 = Deserialize$Ocamlprotocplugin.deserialize(spec$33, constructor$15);

var from_proto$16 = Curry.__1(deserialize$16);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Call, {
      name$prime: name$prime$16,
      to_proto: to_proto$16,
      from_proto: from_proto$16
    });

function name$prime$17(param) {
  return "Schema.ClientToServer";
}

var spec$34 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                var variant = param[0];
                if (variant !== 747848894) {
                  if (variant >= 968744822) {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                3,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Render.to_proto),
                                param[1]
                              ]);
                  } else {
                    return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                                2,
                                Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Unmount.to_proto),
                                param[1]
                              ]);
                  }
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              4,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Call.to_proto),
                              param[1]
                            ]);
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$17 = Serialize$Ocamlprotocplugin.serialize(spec$34);

function to_proto$17(t) {
  var f$prime = Curry._1(serialize$17, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* rootId */0], param[/* value */1]);
}

function constructor$16(rootId, value) {
  return /* record */[
          /* rootId */rootId,
          /* value */value
        ];
}

var spec$35 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Unmount.from_proto),
                    (function (v) {
                        return /* `Unmount */[
                                -699977536,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Render.from_proto),
                      (function (v) {
                          return /* `Render */[
                                  968744822,
                                  v
                                ];
                        })
                    ]),
                /* :: */[
                  Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                        4,
                        Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Call.from_proto),
                        (function (v) {
                            return /* `Call */[
                                    747848894,
                                    v
                                  ];
                          })
                      ]),
                  /* [] */0
                ]
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$17 = Deserialize$Ocamlprotocplugin.deserialize(spec$35, constructor$16);

var from_proto$17 = Curry.__1(deserialize$17);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ClientToServer, {
      name$prime: name$prime$17,
      to_proto: to_proto$17,
      from_proto: from_proto$17
    });

function name$prime$18(param) {
  return "Schema.Error";
}

var spec$36 = Spec$Ocamlprotocplugin.Serialize.C.nil;

var serialize$18 = Serialize$Ocamlprotocplugin.serialize(spec$36);

function to_proto$18(t) {
  return Curry._1(serialize$18, /* () */0);
}

var spec$37 = Spec$Ocamlprotocplugin.Deserialize.C.nil;

var deserialize$18 = Deserialize$Ocamlprotocplugin.deserialize(spec$37, /* () */0);

var from_proto$18 = Curry.__1(deserialize$18);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], $$Error, {
      name$prime: name$prime$18,
      to_proto: to_proto$18,
      from_proto: from_proto$18
    });

function name$prime$19(param) {
  return "Schema.Update";
}

var spec$38 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, ReactElement.to_proto),
          Spec$Ocamlprotocplugin.Serialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Serialize.C.nil);

var serialize$19 = Serialize$Ocamlprotocplugin.serialize(spec$38);

function to_proto$19(t) {
  return Curry._2(serialize$19, /* () */0, t);
}

function constructor$17(a) {
  return a;
}

var spec$39 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.repeated, /* tuple */[
          1,
          Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, ReactElement.from_proto),
          Spec$Ocamlprotocplugin.Deserialize.C.not_packed
        ]), Spec$Ocamlprotocplugin.Deserialize.C.nil);

var deserialize$19 = Deserialize$Ocamlprotocplugin.deserialize(spec$39, constructor$17);

var from_proto$19 = Curry.__1(deserialize$19);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], Update, {
      name$prime: name$prime$19,
      to_proto: to_proto$19,
      from_proto: from_proto$19
    });

function name$prime$20(param) {
  return "Schema.ServerToClient";
}

var spec$40 = Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Serialize.C.int32_int,
          Spec$Ocamlprotocplugin.Serialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Serialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof, (function (param) {
                if (param[0] >= 999946793) {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              3,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, Update.to_proto),
                              param[1]
                            ]);
                } else {
                  return Curry._1(Spec$Ocamlprotocplugin.Serialize.C.oneof_elem, /* tuple */[
                              2,
                              Curry._1(Spec$Ocamlprotocplugin.Serialize.C.message, $$Error.to_proto),
                              param[1]
                            ]);
                }
              })), Spec$Ocamlprotocplugin.Serialize.C.nil));

var serialize$20 = Serialize$Ocamlprotocplugin.serialize(spec$40);

function to_proto$20(t) {
  var f$prime = Curry._1(serialize$20, /* () */0);
  var param = t;
  return Curry._2(f$prime, param[/* rootId */0], param[/* value */1]);
}

function constructor$18(rootId, value) {
  return /* record */[
          /* rootId */rootId,
          /* value */value
        ];
}

var spec$41 = Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.basic, /* tuple */[
          1,
          Spec$Ocamlprotocplugin.Deserialize.C.int32_int,
          Spec$Ocamlprotocplugin.Deserialize.C.proto3
        ]), Curry._2(Spec$Ocamlprotocplugin.Deserialize.C.$caret$colon$colon, Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof, /* :: */[
              Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                    2,
                    Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, $$Error.from_proto),
                    (function (v) {
                        return /* `Error */[
                                106380200,
                                v
                              ];
                      })
                  ]),
              /* :: */[
                Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.oneof_elem, /* tuple */[
                      3,
                      Curry._1(Spec$Ocamlprotocplugin.Deserialize.C.message, Update.from_proto),
                      (function (v) {
                          return /* `Update */[
                                  999946793,
                                  v
                                ];
                        })
                    ]),
                /* [] */0
              ]
            ]), Spec$Ocamlprotocplugin.Deserialize.C.nil));

var deserialize$20 = Deserialize$Ocamlprotocplugin.deserialize(spec$41, constructor$18);

var from_proto$20 = Curry.__1(deserialize$20);

Caml_module.update_mod([[
        [
          0,
          "name'"
        ],
        [
          0,
          "to_proto"
        ],
        [
          0,
          "from_proto"
        ]
      ]], ServerToClient, {
      name$prime: name$prime$20,
      to_proto: to_proto$20,
      from_proto: from_proto$20
    });

exports.StringValue = StringValue;
exports.Int32Value = Int32Value;
exports.Callback = Callback;
exports.LocalProp = LocalProp;
exports.CustomComponent = CustomComponent;
exports.View = View;
exports.FlatList = FlatList;
exports.TouchableOpacity = TouchableOpacity;
exports.RawText = RawText;
exports.$$Text = $$Text;
exports.TextInput = TextInput;
exports.Switch = Switch;
exports.$$Image = $$Image;
exports.ReactElement = ReactElement;
exports.Unmount = Unmount;
exports.Render = Render;
exports.Call = Call;
exports.ClientToServer = ClientToServer;
exports.$$Error = $$Error;
exports.Update = Update;
exports.ServerToClient = ServerToClient;
/* StringValue Not a pure module */
